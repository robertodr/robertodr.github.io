<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>TotalTrash</title>
    <link href="http://totaltrash.xyz//atom.xml" rel="self" />
    <link href="http://totaltrash.xyz/" />
    <id>http://totaltrash.xyz//atom.xml</id>
    <author>
        <name>Roberto Di Remigio</name>
        <email>roberto.diremigio@gmail.com</email>
    </author>
    <updated>2017-07-08T00:00:00Z</updated>
    <entry>
    <title>Turn On Compiler Warnings!</title>
    <link href="http://totaltrash.xyz//posts/turn-on-compiler-warnings/" />
    <id>http://totaltrash.xyz//posts/turn-on-compiler-warnings/</id>
    <published>2017-07-08T00:00:00Z</published>
    <updated>2017-07-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><em>This post originally appeared on <a href="https://dev-cafe.github.io/2017/06/04/turn-on-compiler-warnings/">DevCafe</a></em></p>
<p>Compiler warnings can be a nuisance, clogging the output with unnecessarily verbose information. This is especially true of C++, even more so when the code uses template magic. However, turning them off can be rather harmful.</p>
<p><strong>TL;DR</strong></p>
<p>Set <code>-Wall -Wextra</code>, or equivalent, as your basic compiler flags, both in debug and in release mode. If you are using CMake, the <a href="http://autocmake.readthedocs.io/en/latest/">Autocmake project</a> does it <a href="https://github.com/coderefinery/autocmake/pull/203">by default</a></p>
<h2 id="an-example-from-the-cnpy-library" class="notoc">An example from the <a href="https://github.com/robertodr/cnpy"><code>cnpy</code> library</a></h2>
<p>Consider the following C++11 example, but it applies equally well to earlier standards. The <a href="https://github.com/robertodr/cnpy"><code>cnpy</code> library</a> for saving/loading C++ arrays to/from NumPy binary format has a basic data structure, called <code>NpyArray</code>. An object of this type is constructed by supplying:</p>
<ul>
<li>the shape of the array, i.e. a <code>std::vector&lt;size_t&gt;</code>. For example, a 2-dimensional array with dimensions 10 and 11 will have: <code>std::vector&lt;size_t&gt;   shape({10, 11});</code></li>
<li>the <em>word size</em> of the data type to be dumped to NumPy array. This is either read from the <code>.npy</code> when loading the array, or determined by the result of <code>sizeof(T)</code>, where <code>T</code> is the data type, when saving the array.</li>
</ul>
<p>The constructor will then compute how large a memory buffer is needed and allocate a <code>std::vector&lt;char&gt;</code>. The number of values in the array is computed from the shape array:</p>
<pre class="cpp"><code>size_t nValues = 1;
for (size_t i = 0; i &lt; shape.size(); ++i)
  nValues *= shape[i];</code></pre>
<p>or more compactly using <code>std::accumulate</code>:</p>
<pre class="c++"><code>nValues = std::accumulate(shape.begin(), shape.end(),
                          1, std::multiplies&lt;size_t&gt;());</code></pre>
<p>The type information is encoded in the <code>.npy</code> file format header. When loading the array the user will have to perform a <code>reinterpret_cast</code> to get the correct data type.</p>
<h2 id="runtime-error" class="notoc">Runtime error!</h2>
<p>Stripped to its barebones, the <code>NpyArray</code> class looks like this:</p>
<pre class="cpp"><code>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

struct VectorWtf
{
  VectorWtf(const std::vector&lt;size_t&gt; &amp; s, size_t w) :
    nValues_(std::accumulate(s.begin(),
                                 s.end(),
                                 1,
                                 std::multiplies&lt;size_t&gt;())),
    buffer_(nValues_ * w, char(0)) {
      std::cout &lt;&lt; &quot;nValues_ &quot; &lt;&lt; nValues_ &lt;&lt; std::endl;
      std::cout &lt;&lt; &quot;w &quot; &lt;&lt; w &lt;&lt; std::endl;
      std::cout &lt;&lt; &quot;nValues_ * w &quot; &lt;&lt; nValues_ * w &lt;&lt; std::endl;
      assert(buffer_.size() == nValues_ * w);
      for (size_t i = 0; i &lt; nValues_ * w; ++i) {
        std::cout &lt;&lt; buffer_[i] &lt;&lt; std::endl;
      }
      std::cout &lt;&lt; &quot;buffer_.size() &quot; &lt;&lt; buffer_.size() &lt;&lt; std::endl;
  }

  std::vector&lt;char&gt; buffer_;
  size_t nValues_;
};

int main()
{
  std::vector&lt;size_t&gt; shape({10, 11});
  size_t w = 16;

  VectorWtf(shape, w);

  return 0;
}</code></pre>
<p>Let’s now try to compile it:</p>
<pre class="bash"><code>g++ -std=c++11 -O0 main.cpp &amp;&amp; ./a.out</code></pre>
<p>The live example on <a href="http://coliru.stacked-crooked.com/a/bcf64023319e2f5e">Coliru</a> shows that we get a runtime error because the assertion in the constructor fails.</p>
<pre class="bash"><code>nValues_ 110
w 16
nValues_ * w 1760
a.out: main.cpp:18: VectorWtf::VectorWtf(const std::vector&lt;long unsigned int&gt;&amp;, size_t): Assertion `buffer_.size() == nValues_ * w&#39; failed.
bash: line 7: 13432 Aborted                 (core dumped) ./a.out</code></pre>
<p>What’s happening? Well, a very, very stupid mistake. <strong>The <code>buffer_</code> data member is initialized using the <code>nValues_</code> data member</strong> This shouldn’t be a problem, since it’s <strong>initialized first</strong> in the constructor, right? Wrong! <a href="http://open-std.org/JTC1/SC22/WG21/docs/papers/2016/n4594.pdf">According to the standard, 12.6.2 Section 13.3</a> data members are initialized in the order they were declared in the class. Thus <code>buffer_</code> gets initialized first, using an undefined value for <code>nValues_</code>.</p>
<h2 id="fixing-it" class="notoc">Fixing it</h2>
<p>The <strong>correct</strong> <code>struct</code> declaration is thus:</p>
<pre class="cpp"><code>#include &lt;algorithm&gt;
#include &lt;cassert&gt;
#include &lt;iostream&gt;
#include &lt;numeric&gt;
#include &lt;vector&gt;

struct VectorWtf
{
  VectorWtf(const std::vector&lt;size_t&gt; &amp; s, size_t w) :
    nValues_(std::accumulate(s.begin(),
                                 s.end(),
                                 1,
                                 std::multiplies&lt;size_t&gt;())),
    buffer_(nValues_ * w, char(0)) {
      std::cout &lt;&lt; &quot;nValues_ &quot; &lt;&lt; nValues_ &lt;&lt; std::endl;
      std::cout &lt;&lt; &quot;w &quot; &lt;&lt; w &lt;&lt; std::endl;
      std::cout &lt;&lt; &quot;nValues_ * w &quot; &lt;&lt; nValues_ * w &lt;&lt; std::endl;
      assert(buffer_.size() == nValues_ * w);
      for (size_t i = 0; i &lt; nValues_ * w; ++i) {
        std::cout &lt;&lt; buffer_[i] &lt;&lt; std::endl;
      }
      std::cout &lt;&lt; &quot;buffer_.size() &quot; &lt;&lt; buffer_.size() &lt;&lt; std::endl;
  }

  size_t nValues_;
  std::vector&lt;char&gt; buffer_;
};

int main()
{
  std::vector&lt;size_t&gt; shape({10, 11});
  size_t w = 16;

  VectorWtf(shape, w);

  return 0;
}</code></pre>
<p>which also honors the tenet of ordering data members in your classes and structs by their size in memory. However, this is something very easily forgotten. How to avoid these kinds of errors?</p>
<ol type="1">
<li><strong>Do not initialize data members based on other data members</strong>. This is, in my opinion, overly restrictive.</li>
<li><strong>Insert assertions in the constructors</strong>. Very useful, but assertions only work when <code>-DNDEBUG</code> is not given to the compiler. Most of the times this is not the case when compiling with optimization.</li>
<li><strong>Turn on compiler warnings</strong>. <code>-Wall</code> catches this mistake and many others. For an extra layer of warnings, I also turn on <code>-Wextra</code>. This is the <a href="http://coliru.stacked-crooked.com/a/8eecbafde77f1d23">output on Coliru</a></li>
</ol>
<pre class="bash"><code>main.cpp: In constructor &#39;VectorWtf::VectorWtf(const std::vector&lt;long unsigned int&gt;&amp;, size_t)&#39;:
main.cpp:27:10: warning: &#39;VectorWtf::nValues_&#39; will be initialized after [-Wreorder]
   size_t nValues_;
          ^~~~~~~~
main.cpp:26:21: warning:   &#39;std::vector&lt;char&gt; VectorWtf::buffer_&#39; [-Wreorder]
   std::vector&lt;char&gt; buffer_;
                     ^~~~~~~
main.cpp:9:3: warning:   when initialized here [-Wreorder]
   VectorWtf(const std::vector&lt;size_t&gt; &amp; s, size_t w) :
   ^~~~~~~~~</code></pre>]]></summary>
</entry>
<entry>
    <title>Song of the Week, 10</title>
    <link href="http://totaltrash.xyz//posts/sow10_2017/" />
    <id>http://totaltrash.xyz//posts/sow10_2017/</id>
    <published>2017-03-10T00:00:00Z</published>
    <updated>2017-03-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I found this out listening to a <a href="https://www.mixcloud.com/TheVinylFactory/vf-mix-08-elijah-wood-zach-cowie-aka-wooden-wisdom/">podcast</a> on <a href="https://www.mixcloud.com">MixCloud</a>. The podcast was put together by DJ Wooden Wisdom (Elijah Wood &amp; Zach Cowie) for <a href="http://thevinylfactory.com/">The Vinyl Factory</a>. Here is the <a href="http://thevinylfactory.com/features/listen-to-an-exclusive-elijah-wood-zach-cowie-aka-wooden-wisdom-vinyl-only-mix/">tracklist</a>.</p>
<p><a href="https://youtu.be/8JGohtIFM_Q" title="The Greatest Name That Lives"><img src="../../../images/videos/youtube-the_greatest_name_that_lives.jpg" alt="The Greatest Name That Lives" /></a></p>]]></summary>
</entry>
<entry>
    <title>Song of the Week, 21</title>
    <link href="http://totaltrash.xyz//posts/sow21_2016/" />
    <id>http://totaltrash.xyz//posts/sow21_2016/</id>
    <published>2016-05-27T00:00:00Z</published>
    <updated>2016-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://youtu.be/HxPWQsF_ixo" title="Lethal Musk"><img src="../../../images/videos/youtube-lethal_musk.jpg" alt="Lethal Musk" /></a></p>]]></summary>
</entry>
<entry>
    <title>Song of the Week, 20</title>
    <link href="http://totaltrash.xyz//posts/sow20_2016/" />
    <id>http://totaltrash.xyz//posts/sow20_2016/</id>
    <published>2016-05-19T00:00:00Z</published>
    <updated>2016-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://youtu.be/JEJpmDUMKco" title="Leave Me Alone"><img src="../../../images/videos/youtube-leave_me_alone.jpg" alt="Leave Me ALone" /></a></p>]]></summary>
</entry>
<entry>
    <title>Welcome</title>
    <link href="http://totaltrash.xyz//posts/welcome/" />
    <id>http://totaltrash.xyz//posts/welcome/</id>
    <published>2016-04-27T00:00:00Z</published>
    <updated>2016-04-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><a href="https://youtu.be/3dknzzBkX7U" title="Total Trash"><img src="../../../images/videos/youtube-total_trash.jpg" alt="Total Trash" /></a></p>]]></summary>
</entry>
<entry>
    <title>Test Post</title>
    <link href="http://totaltrash.xyz//posts/test-post/" />
    <id>http://totaltrash.xyz//posts/test-post/</id>
    <published>2015-12-13T00:00:00Z</published>
    <updated>2015-12-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent dolor nisi, feugiat sit amet egestas sit amet, mattis sit amet velit. Proin quis metus id mi vulputate adipiscing eget et <strong>sapien</strong>. Sed iaculis auctor sem ac convallis <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>. Cras nisi libero, dignissim quis facilisis et, bibendum eget enim. Vivamus est leo, tristique ut adipiscing vitae, malesuada adipiscing tellus. Integer nec aliquam justo. Nam ac lacus erat. In <strong><em>hac habitasse platea</em></strong> dictumst. Donec pharetra, lectus sit amet ultrices fringilla, metus mi auctor ligula, in hendrerit dui arcu eu leo.</p>
<p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla facilisi. Vestibulum consectetur nulla eget erat <em>fermentum malesuada</em>. Nullam ultricies nulla ut eros vulputate sed cursus tortor faucibus. Cras ac risus mauris. Suspendisse molestie elementum luctus. Vestibulum <a href="http://www.google.com">venenatis blandit</a> velit ac pretium. Press <kbd>CTRL</kbd> + <kbd>X</kbd>.</p>
<p><br /><span class="math">$$ i\hbar\frac{\partial \psi}{\partial t}
  = \frac{-\hbar^2}{2m} \left(
    \frac{\partial^2}{\partial x^2}
    + \frac{\partial^2}{\partial y^2}
    + \frac{\partial^2}{\partial z^2}
  \right) \psi + V \psi $$</span><br /></p>
<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, <strong>venenatis</strong> vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>
<p><br /><span class="math">$$R_{ab} - {\textstyle 1 \over 2}R\,g_{ab} + \Lambda\ g_{ab} = \kappa\, T_{ab}$$</span><br /></p>
<p>Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu. Ut et massa nibh, ut mollis augue. In hac habitasse platea dictumst. Sed massa orci, venenatis vitae dapibus sit amet, varius ut nibh. Ut vel enim leo, at posuere nisi. In elementum sem vel nibh malesuada sagittis.</p>
<pre class="ruby" text="an example of base64 decoding in ruby"><code>require &#39;base64&#39;

File.open(&#39;favicon.png&#39;, &#39;wb&#39;) do |f|
  f.write(Base64.decode64(base64))
end</code></pre>
<p>Donec vitae turpis non augue pulvinar imperdiet eu non erat. Integer mollis diam ac quam lobortis luctus. Suspendisse scelerisque sodales massa sit amet pharetra. <span class="math"><em>Δ</em><em>S</em> = <em>π</em></span> <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> Donec cursus, velit in mollis dapibus, nunc elit pharetra erat, et dictum sem sapien pretium ligula. Cras nibh elit, mollis eu eleifend sed, faucibus in velit. Aliquam gravida tristique molestie. Donec gravida, diam ac auctor auctor, nulla enim varius sem, non auctor urna mi vitae enim. Cras aliquam semper nibh, quis viverra urna ultrices et. Nunc rhoncus fringilla dapibus.</p>
<p><img src="http://placekitten.com/720/250" class="center"></p>
<h1 id="immortal-words" class="notoc">Immortal Words</h1>
<p>As you can see, there’s lots of work to do! Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. Cras lectus velit, rhoncus et mollis eget, ultricies quis ligula. Integer ornare nibh in est molestie tempus. Praesent bibendum placerat diam id gravida. Fusce et velit eget dui laoreet interdum eget id arcu.</p>
<blockquote>
<p>Too many people have opinions on things they know nothing about. And the more ignorant they are, the more opinions they have.</p>
<p><cite><strong>Thomas Hildern</strong> on <a href="http://fallout.wikia.com/wiki/Thomas_Hildern">Fallout Wiki</a></cite></p>
</blockquote>
<p>Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi.</p>
<h2 id="the-meaning-of-life" class="notoc">The Meaning of Life</h2>
<p><img src="http://placekitten.com/150/100" class="right" title="Place Kitten #3"></p>
<p>Aenean tristique, magna a semper venenatis, orci odio tempor lorem, ac molestie ligula enim ac urna. Fusce egestas nisl id massa porta vitae pretium tellus aliquet. Morbi tempor arcu sit amet felis hendrerit aliquam. Nulla facilisi. Suspendisse diam tortor, pharetra ac porta eu, ullamcorper nec lectus. Sed nulla turpis, blandit et tincidunt vel, <code>condimentum</code> et sapien. Aliquam dignissim blandit pharetra. Mauris ornare accumsan libero at bibendum. Morbi dui nisl, aliquet sit amet gravida sit amet, mollis commodo nulla. Quisque eu felis purus.</p>
<p><br /><span class="math">∀<em>x</em>, <em>y</em> : ℤ, <em>x</em> &gt; 3 ∧ <em>y</em> &lt; 2 ⇒ <em>x</em><sup>2</sup> − 2<em>y</em> &gt; 5</span><br /></p>
<p>Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>
<h3 id="things-to-do" class="notoc">Things to do</h3>
<ul>
<li>first do this</li>
<li>then do this other thing</li>
<li>then maybe, if you’re not tired, do this last thing</li>
</ul>
<p>Here it is numbered for you:</p>
<ol type="1">
<li>first do this</li>
<li>then do this other thing</li>
<li>then maybe, if you’re not tired, do this last thing</li>
</ol>
<p>As you can see, there’s lots of work to do! Aenean mauris augue, faucibus vel sagittis nec, viverra sit amet sapien. Etiam neque nisi, molestie vel lacinia a, scelerisque eget justo. Suspendisse imperdiet lectus eu metus malesuada vel vehicula libero rutrum. Nulla facilisi. In lectus nisl, semper ac imperdiet eu, ultricies luctus erat. Sed ultrices lectus in <code>massa tincidunt</code> fringilla. Aenean lectus tortor, tempus a sagittis vitae, hendrerit eget lacus.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Cras nibh elit, mollis eu eleifend sed, faucibus in velit.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>This is the awesome constant<a href="#fnref2">↩</a></p></li>
</ol>
</section>]]></summary>
</entry>

</feed>
